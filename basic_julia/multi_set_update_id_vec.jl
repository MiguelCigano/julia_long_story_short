# Leer el archivo base .po y extraer las traducciones en orden
function parse_po_file(po_file_path)
    msgids = String[]
    msgstrs = String[]
    current_msgid = ""
    current_msgstr = ""

    for line in eachline(po_file_path)
        line = strip(line)
        if startswith(line, "msgid ")
            current_msgid = strip(line[7:end], ['"'])
        elseif startswith(line, "msgstr ")
            current_msgstr = strip(line[8:end], ['"'])
            # Almacenar la traducción
            push!(msgids, current_msgid)
            push!(msgstrs, current_msgstr)
            current_msgid = ""
            current_msgstr = ""
        end
    end

    return msgids, msgstrs
end

# Leer el archivo .txt con nuevas traducciones
function read_translations(txt_path)
    msgids = String[]
    msgstrs = String[]
    for line in eachline(txt_path)
        if occursin("=>", line)
            msgid, msgstr = split(line, "=>", limit=2)
            push!(msgids, strip(msgid, ['"']))
            push!(msgstrs, strip(msgstr, ['"']))
        end
    end
    return msgids, msgstrs
end

# Validar espacios al inicio o final
function validate_spaces(msgids, msgstrs)
    for (msgid, msgstr) in zip(msgids, msgstrs)
        if startswith(msgid, " ") || endswith(msgid, " ") ||
           startswith(msgstr, " ") || endswith(msgstr, " ")
            println("Aviso: Hay espacios al inicio o al final en: msgid='$msgid', msgstr='$msgstr'")
        end
    end
end

# Rutas de los archivos
txt_path = "multiaccount_scripts/test_multi_julia/trans_PT_BR_pt_BR"
input_po_file = "multiaccount_scripts/test_multi_julia/pt_BR.po"
output_po_file = "multiaccount_scripts/test_multi_julia_result/pt_BR_result.po"

# Leer y validar las traducciones desde el .txt
msgids_txt, msgstrs_txt = read_translations(txt_path)
println("\nValidando espacios en las traducciones...\n")
validate_spaces(msgids_txt, msgstrs_txt)

# Leer traducciones existentes del archivo .po
msgids_po, msgstrs_po = parse_po_file(input_po_file)

# Crear un archivo .po actualizado
println("\nActualizando el archivo .po...\n")
open(output_po_file, "w") do file
    # Copiar traducciones existentes en el mismo orden
    write(file, "# This PO file is automatically generated by PO File Editor of Tizen Studio\n")
    for (msgid_po, msgstr_po) in zip(msgids_po, msgstrs_po)
        # Buscar si el msgid está en las nuevas traducciones
        idx = findfirst(x -> x == msgid_po, msgids_txt)
        if idx !== nothing
            # Si la traducción cambió, actualizarla
            new_msgstr = msgstrs_txt[idx]
            if msgstr_po != new_msgstr
                println("\nUpdate translation: msgid '$msgid_po' from '$msgstr_po' ==> '$new_msgstr'")
                write(file, "\nmsgid \"$msgid_po\"\n")
                write(file, "msgstr \"$new_msgstr\"\n")
            else
                # Si no cambió, mantener la traducción original
                write(file, "\nmsgid \"$msgid_po\"\n")
                write(file, "msgstr \"$msgstr_po\"\n")
            end
        else
            # Si no está en el .txt, conservar la traducción original
            write(file, "\nmsgid \"$msgid_po\"\n")
            write(file, "msgstr \"$msgstr_po\"\n")
        end
    end

    # Agregar nuevas traducciones al final
    write(file, "\n# New translations\n")
    for (msgid_txt, msgstr_txt) in zip(msgids_txt, msgstrs_txt)
        if msgid_txt ∉ msgids_po
            println("Nueva traducción agregada: msgid='$msgid_txt', msgstr='$msgstr_txt'")
            write(file, "\nmsgid \"$msgid_txt\"\n")
            write(file, "msgstr \"$msgstr_txt\"\n")
        end
    end
end

println("\n¡Archivo .po actualizado creado con éxito!\n")
